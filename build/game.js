// Generated by CoffeeScript 1.10.0
(function() {
  this.timeout = function(time, method) {
    return setTimeout(method, time);
  };

  this.game = null;

  this.onload = function() {
    this.game = new Game();
    return this.render();
  };

  this.render = function() {
    this.game.render();
    return requestAnimationFrame(window.render);
  };

  this.Game = (function() {
    Game.prototype.column_heights = [0, 0, 0, 0, 0, 0, 0];

    function Game() {
      this.base = new Base();
      this.controller = new Controller(this);
      this.floor = new Box(this, 100, 100, 10);
      this.board = new Board(this);
      this.setupPlaceholderPieces();
      this.ai = new AI();
      this.score = new Score(this);
    }

    Game.prototype.setupPlaceholderPieces = function() {
      var i, j, piece, results;
      this.placeholders = [];
      results = [];
      for (i = j = 0; j <= 6; i = ++j) {
        piece = new Piece(this);
        piece.stop();
        piece.setColor(0xecf0f1);
        piece.setOpacity(0.3);
        piece.setPosition(this.board.COLUMNS[i], 0, 75);
        piece.setName('Placeholder');
        results.push(this.placeholders.push(piece));
      }
      return results;
    };

    Game.prototype.win = function(playerWins) {
      var element, text;
      text = playerWins ? 'You Win' : 'AI Wins';
      element = document.getElementById('win');
      element.innerHTML = text;
      return element.style.display = "block";
    };

    Game.prototype.place = function(column) {
      var result, row;
      this.piece = new Piece(this, this.controller.isPlayerTurn());
      row = this.column_heights[column]++;
      this.score.place(row, column, this.controller.isPlayerTurn());
      this.piece.place(row, column);
      result = this.score.checkForWin();
      if (result || result === false) {
        return this.win(result);
      }
    };

    Game.prototype.highlight = function(column) {
      this.placeholders[column].setColor(0xe74c3c);
      return timeout(600, (function(_this) {
        return function() {
          return _this.placeholders[column].setColor(0xecf0f1);
        };
      })(this));
    };

    Game.prototype.moveAI = function() {
      return timeout(2000, (function(_this) {
        return function() {
          _this.place(_this.ai.move());
          return timeout(750, function() {
            return _this.controller.setPlayerTurn(true);
          });
        };
      })(this));
    };

    Game.prototype.render = function() {
      this.controller.update();
      return this.base.render();
    };

    Game.prototype.addToScene = function(object) {
      return this.base.addToScene(object);
    };

    Game.prototype.removeFromScene = function(object) {
      return this.base.removeFromScene(object);
    };

    return Game;

  })();

}).call(this);
