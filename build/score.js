// Generated by CoffeeScript 1.10.0
(function() {
  this.Score = (function() {
    function Score(game) {
      var i, k;
      this.board = new Array(7);
      for (i = k = 0; k <= 6; i = ++k) {
        this.board[i] = new Array(7);
      }
    }

    Score.prototype.place = function(row, column, isPlayer) {
      return this.board[row][column] = isPlayer;
    };

    Score.prototype.checkForWin = function() {
      var d, h, i, j, k, l, v;
      for (i = k = 0; k <= 6; i = ++k) {
        for (j = l = 0; l <= 6; j = ++l) {
          h = this.isHorizontalWin(i, j);
          v = this.isVerticalWin(i, j);
          d = this.isDiagonalWin(i, j);
          if (h || v || d) {
            return true;
          } else if (h === false || v === false || d === false) {
            return false;
          }
        }
      }
      return void 0;
    };

    Score.prototype.isHorizontalWin = function(row, col) {
      if (this.board[row][col] === void 0) {
        return void 0;
      }
      if (col > 3) {
        return void 0;
      }
      if (this.board[row][col] === this.board[row][col + 1] && this.board[row][col + 1] === this.board[row][col + 2] && this.board[row][col + 2] === this.board[row][col + 3]) {
        return this.board[row][col];
      }
      return void 0;
    };

    Score.prototype.isVerticalWin = function(row, col) {
      if (this.board[row][col] === void 0) {
        return void 0;
      }
      if (row > 1) {
        return void 0;
      }
      if (this.board[row][col] === this.board[row + 1][col] && this.board[row + 1][col] === this.board[row + 2][col] && this.board[row + 2][col] === this.board[row + 3][col]) {
        return this.board[row][col];
      }
      return void 0;
    };

    Score.prototype.isDiagonalWin = function(row, col) {
      if (this.board[row][col] === void 0) {
        return void 0;
      }
      if (row > 1) {
        return void 0;
      }
      if (col <= 3) {
        if (this.board[row][col] === this.board[row + 1][col + 1] && this.board[row + 1][col + 1] === this.board[row + 2][col + 2] && this.board[row + 2][col + 2] === this.board[row + 3][col + 3]) {
          return this.board[row][col];
        }
      }
      if (col >= 3) {
        if (this.board[row][col] === this.board[row + 1][col - 1] && this.board[row + 1][col - 1] === this.board[row + 2][col - 2] && this.board[row + 2][col - 2] === this.board[row + 3][col - 3]) {
          return this.board[row][col];
        }
      }
      return void 0;
    };

    return Score;

  })();

}).call(this);
